Port eventpipe

Resources
 - https://github.com/dotnet/runtime/tree/main/src/native/eventpipe
 - Juan: Virtual Dispatch, Macros

Terminology
 - RPC, NamedPipe, Sockets
 - EventPipeEvent (Schema), NS: EventPipeProvier
 - EventPipeSession (Consumer), Specify events, sinks, int. storage
 - EventSource->EventSession->Sink->ReadTrace

Exploration
 - Explore Jan's guidance
 - Explore Chris's guidance
 - plan for next step

Temp resources
 - [Work] C:\Work\Core\CurrentWork\runtime
 - [Laptop] c:\work\core\CurrentWork3\runtime

--------------------------------------------------------------------------------
Jan's guidance

Implementation
https://github.com/dotnet/runtime/tree/main/src/native/eventpipe
 - c:\work\core\CurrentWork\runtime\src\native\eventpipe\
    + 80 files (728K, h (46), c(30))
    + ep-buffer-manager.c (63K), ep.c (49K)
    + ep-rt.h (30K), ep-rt.h(11K)

Hook to runtime
(copy and ifdef coreclr or start from scratch)
https://github.com/dotnet/runtime/tree/main/src/coreclr/vm/eventing/eventpipe
 - c:\work\core\CurrentWork\runtime\src\coreclr\vm\eventing\eventpipe
    + 7 files (116K, h(5), cpp(1))
    + ep-rt-coreclr.h(83K), ds-rt-coreclr.h(11K)


https://github.com/dotnet/runtime/tree/main/src/mono/mono/eventpipe

--------------------------------------------------------------------------------
Chris's guidance
 - get familar with the terminology
    + resources: binlog, coreclr build, nativeaot build
    C:\work\core\CurrentWork3\runtime\src\coreclr\runtime.proj
    CommandLineArguments = "C:\work\core\CurrentWork3\runtime\src\coreclr\build-runtime.cmd" -x64 -debug -os windows
    CommandLineArguments = "C:\work\core\CurrentWork3\runtime\src\coreclr\build-runtime.cmd" -x64 -debug -os windows -component alljits -component nativeaot

 - how does "Runtime.WorkstationGC.lib" get build
 Qns: How does the --component nativeaot pick up the source files?

 - add EventPipe assets and understand errors, 
    + from nativeAOT rt perspective
    + NativePipe perspective

--------------------------------------------------------------------------------
Johan's guidance

Hi Johan, I work in the CLR NativeAOT team and looking to port EventPipe using the mono port model (CoreCLR also has ETW that makes it a little complex). I notice that you seem to have done some work to port EventPipe to mono. I don't have much experience with C/C++ (CMake) and wonder if you have some pointers for me to make the port easier.
 - so if you start to try to build the CoreCLR shim + event pipe under native aot, I believe you have something to start working with
    * runtime: https://github.com/dotnet/runtime/blob/main/src/native/eventpipe/ep-rt.h
    * ds: https://github.com/dotnet/runtime/blob/main/src/native/eventpipe/ds-rt.h
 - I know there was some lack of container classes for native aot when we discussed this in the past
    * so maybe you will need to replace/implement them with what native aot have, or use mono container classes from eglib
    * https://github.com/mono/eglib/
 - ok, we had another discussion a year ago, to potentially drop the shim parts for container classes and standardize on mono's eglib classes, maybe that could be something to pursue here as well, if you can't use CoreCLR's container classes in Native AOT

--------------------------------------------------------------------------------
Next steps
 - how does "Runtime.WorkstationGC.lib" get build


Goal: Add NativePipe files to nativeaot build.
    + specifically, add the files to runtime.workstationGC.lib or *ServerGC.lib

Exploration
 - How does nativeaot runtime lib gets build?
    + Looks like CMakeLists.txt control this
    + See scratch.txt


 - How does individual files get picked?
    + Find how mono and coreclr pick the runtime
    + See scratch.txt

-------------------------------------------------------------------------------
 - add EventPipe assets and understand errors, 
    + c:\work\core\CurrentWork3\runtime\src\native\eventpipe\
        * ep-buffer-manager.c (63K), ep.c (49K)
        * C:\work\core\CurrentWork3\runtime\src\native\eventpipe\CMakeLists.txt
    + c:\work\core\CurrentWork3\runtime\src\coreclr\vm\eventing\eventpipe
        * ep-rt-coreclr.h(83K), ds-rt-coreclr.h(11K)
        * C:\work\core\CurrentWork3\runtime\src\coreclr\vm\eventing\eventpipe\CMakeLists.txt

Exploration
1) Hooking up
 - C:\work\core\CurrentWork3\runtime\src\native\eventpipe\ep-rt-config.h
    + defines coreclr files,
// EventPipe runtime implementation.
#define EP_RT_H "ep-rt-coreclr.h"
#define EP_RT_TYPES_H "ep-rt-types-coreclr.h"
#define EP_RT_CONFIG_H "ep-rt-config-coreclr.h"

// DiagnosticServer runtime implementation.
#define DS_RT_H "ds-rt-coreclr.h"
#define DS_RT_TYPES_H "ds-rt-types-coreclr.h"

2) Details for ep-rt.h (common) vs ep-rt-coreclr.h (CoreCLR)
 - [Common] #define EP_RT_DECLARE_LIST_PREFIX(prefix_name, list_name, list_type, item_type) \
    + 	static void EP_RT_BUILD_TYPE_FUNC_NAME(prefix_name, list_name, alloc) (list_type *list); \
 - [CoreCLR] #define EP_RT_DEFINE_LIST_PREFIX(prefix_name, list_name, list_type, item_type) \
    + 	static inline void EP_RT_BUILD_TYPE_FUNC_NAME(prefix_name, list_name, alloc) (list_type *list) \
	{ \
		STATIC_CONTRACT_NOTHROW; \
		_rt_coreclr_list_alloc<list_type>(list); \
	} \

    + template<typename LIST_TYPE>
static
inline
void
_rt_coreclr_list_alloc (LIST_TYPE *list) {
	STATIC_CONTRACT_NOTHROW;
	EP_ASSERT (list != NULL);

	list->list = new (nothrow) typename LIST_TYPE::list_type_t ();
}

-----------------------------------------------------------------------------------
Objective: get a build of -s clr.aot with eventpipe files
 - Get runtime.gc*.lib (likely with issues) to interate On
    + Copy event\eventpipe under nativeaot\runtime and modify cmakelists
        + CMakeList modification

Appraches
1) Copy coreclr\vm\eventing\eventpipe to coreclr\nativeaot\runtime\eventing\eventpipe
    - Errors - see scratch1.txt
    - Challenges
        * There is an etw directory
        * python is used to generate runtime event manifest
        * Directory depth is challenging

2) Add the necessary files in the barest form possible - follow the mono model
 - git clean -xfd & build.cmd -arch x64 -os windows -s clr.aot -c Release -bl
 build.cmd -arch x64 -os windows -s Mono.Runtime -c Release -bl
copy artifacts\log\Release\Build.binlog C:\Work\Core\LakshanF\CSharp\src\aot\experiments\Diagnostics\Logging\PortEventPipe\binlogs\take_2_Success_NoFiles.binlog
C:\Work\Core\CurrentWork\runtime\artifacts\obj\coreclr\windows.x64.Release\nativeaot\Runtime\eventpipe


I) take_1 
    - Success!! But no files were build :-(
- Why
    a) WORKS: C:\Work\Core\CurrentWork\runtime\src\coreclr\nativeaot\Runtime\CMakeLists.txt
            if(NOT CLR_CMAKE_TARGET_ARCH_WASM)
            add_subdirectory(Full)
            --->  add_subdirectory(eventpipe)
    b) ??: C:\Work\Core\CurrentWork\runtime\src\coreclr\nativeaot\Runtime\eventpipe\CMakeLists.txt
        if(ENABLE_PERFTRACING)
3) Back to CoreCLR! - After talking to Johan
