Port eventpipe

Resources
 - https://github.com/dotnet/runtime/tree/main/src/native/eventpipe
 - Juan: Virtual Dispatch, Macros

Terminology
 - RPC, NamedPipe, Sockets
 - EventPipeEvent (Schema), NS: EventPipeProvier
 - EventPipeSession (Consumer), Specify events, sinks, int. storage
 - EventSource->EventSession->Sink->ReadTrace

Exploration
 - Explore Jan's guidance
 - Explore Chris's guidance
 - plan for next step

Temp resources
 - c:\work\core\CurrentWork3\runtime

--------------------------------------------------------------------------------
Jan's guidance

Implementation
https://github.com/dotnet/runtime/tree/main/src/native/eventpipe
 - c:\work\core\CurrentWork3\runtime\src\native\eventpipe\
    + 80 files (728K, h (46), c(30))
    + ep-buffer-manager.c (63K), ep.c (49K)
    + ep-rt.h (30K), ep-rt.h(11K)

Hook to runtime
(copy and ifdef coreclr or start from scratch)
https://github.com/dotnet/runtime/tree/main/src/coreclr/vm/eventing/eventpipe
 - c:\work\core\CurrentWork3\runtime\src\coreclr\vm\eventing\eventpipe
    + 7 files (116K, h(5), cpp(1))
    + ep-rt-coreclr.h(83K), ds-rt-coreclr.h(11K)


https://github.com/dotnet/runtime/tree/main/src/mono/mono/eventpipe

--------------------------------------------------------------------------------
Chris's guidance
 - get familar with the terminology
    + resources: binlog, coreclr build, nativeaot build
    C:\work\core\CurrentWork3\runtime\src\coreclr\runtime.proj
    CommandLineArguments = "C:\work\core\CurrentWork3\runtime\src\coreclr\build-runtime.cmd" -x64 -debug -os windows
    CommandLineArguments = "C:\work\core\CurrentWork3\runtime\src\coreclr\build-runtime.cmd" -x64 -debug -os windows -component alljits -component nativeaot

 - how does "Runtime.WorkstationGC.lib" get build
 Qns: How does the --component nativeaot pick up the source files?

 - add EventPipe assets and understand errors, 
    + from nativeAOT rt perspective
    + NativePipe perspective

--------------------------------------------------------------------------------
Next steps
 - how does "Runtime.WorkstationGC.lib" get build


Goal: Add NativePipe files to nativeaot build.
    + specifically, add the files to runtime.workstationGC.lib or *ServerGC.lib

Exploration
 - How does nativeaot runtime lib gets build?

Runtime.WorkstationGC.dir (somewhat contigous files with few missing numbers)
[222/2310] Building CXX object nativeaot\Runtime\Full\CMakeFiles\Runtime.WorkstationGC.dir\__\rhassert.cpp.obj
...
FEW Missing like
    [226/2310] Linking CXX shared library tools\aot\jitinterface\jitinterface_x64.dll
[316/2310] Building CXX object nativeaot\Runtime\Full\CMakeFiles\Runtime.WorkstationGC.dir\__\windows\CoffNativeCodeManager.cpp.obj

NOTE: clr.cot means reduced build
[229/1028] Linking CXX static library nativeaot\Runtime\Full\Runtime.WorkstationGC.lib
[391/1028] cmd.exe /C "cd /D C:\work\core\CurrentWork3\runtime\artifacts\obj\coreclr\windows.x64.Debug && 
"C:\Program Files\Microsoft Visual Studio\2022\Preview\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe" 
-DCMAKE_INSTALL_COMPONENT=nativeaot -DBUILD_TYPE=Debug -P C:/work/core/CurrentWork3/runtime/artifacts/obj/coreclr/windows.x64.Debug/cmake_install.cmake"

-- Installing: C:/work/core/CurrentWork3/runtime/artifacts/bin/coreclr/windows.x64.Debug/aotsdk/Runtime.WorkstationGC.lib


Runtime.ServerGC.dir
[304/2310] Building CXX object nativeaot\Runtime\Full\CMakeFiles\Runtime.ServerGC.dir\__\rhassert.cpp.obj
...
[394/2310] Building CXX object nativeaot\Runtime\Full\CMakeFiles\Runtime.ServerGC.dir\__\__\__\gc\gcsvr.cpp.obj

Runtime.ServerGC.GuardCF.dir
[383/2310] Building CXX object nativeaot\Runtime\Full\CMakeFiles\Runtime.ServerGC.GuardCF.dir\__\rhassert.cpp.obj
---
[470/2310] Building CXX object nativeaot\Runtime\Full\CMakeFiles\Runtime.ServerGC.GuardCF.dir\__\__\__\gc\gcsvr.cpp.obj




    + runtime.proj, target:BuildRuntime, Task: coreclr\build-runtime.cmd" -x64 -debug -os windows
[135/2310] Building C object libs-native\System.IO.Compression.Native\CMakeFiles\System.IO.Compression.Native.Aot.GuardCF.dir\C_\work\core\CurrentWork\runtime\src\native\external\zlib-intel\inflate.c.obj
AsmOffsets.cpp

[316/2310] Building CXX object nativeaot\Runtime\Full\CMakeFiles\Runtime.WorkstationGC.dir\__\windows\CoffNativeCodeManager.cpp.obj
[392/2310] Building CXX object nativeaot\Runtime\Full\CMakeFiles\Runtime.ServerGC.dir\__\windows\CoffNativeCodeManager.cpp.obj
[466/2310] Building CXX object nativeaot\Runtime\Full\CMakeFiles\Runtime.ServerGC.GuardCF.dir\__\windows\CoffNativeCodeManager.cpp.obj

 - How does individual files get picked?
    + Find how mono and coreclr pick the runtime

C:\work\core\CurrentWork3\runtime\src\native\eventpipe\ep-event-payload.c 


CommandLineArguments = "C:\work\core\CurrentWork\runtime\src\coreclr\build-runtime.cmd" -x64 -debug -os windows
[1906/2310] Building CXX object vm\eventing\eventpipe\CMakeFiles\eventpipe_objs.dir\C_\work\core\CurrentWork\runtime\src\native\eventpipe\ep-buffer-manager.c.obj
[1910/2310] Building CXX object vm\eventing\eventpipe\CMakeFiles\eventpipe_objs.dir\C_\work\core\CurrentWork\runtime\src\native\eventpipe\ep-event-payload.c.obj
[1942/2310] Building CXX object vm\eventing\eventpipe\CMakeFiles\eventpipe_objs.dir\ep-rt-coreclr.cpp.obj

CommandLineArguments = call "C:\work\core\CurrentWork\runtime\eng\native\init-vs-env.cmd" x64 && cd /D "C:\work\core\CurrentWork\runtime\artifacts\obj\mono\windows.x64.Debug\" &&  cmake --build . --target install --config Debug
[325/638] Building C object mono\mini\CMakeFiles\diagnostics_tracing-objects.dir\C_\work\core\CurrentWork\runtime\src\native\eventpipe\ep-event-payload.c.obj



-------------------------------------------------------------------------------
 - add EventPipe assets and understand errors, 
    + c:\work\core\CurrentWork3\runtime\src\native\eventpipe\
        * ep-buffer-manager.c (63K), ep.c (49K)
        * C:\work\core\CurrentWork3\runtime\src\native\eventpipe\CMakeLists.txt
    + c:\work\core\CurrentWork3\runtime\src\coreclr\vm\eventing\eventpipe
        * ep-rt-coreclr.h(83K), ds-rt-coreclr.h(11K)
        * C:\work\core\CurrentWork3\runtime\src\coreclr\vm\eventing\eventpipe\CMakeLists.txt

Exploration
1) Hooking up
 - C:\work\core\CurrentWork3\runtime\src\native\eventpipe\ep-rt-config.h
    + defines coreclr files,
// EventPipe runtime implementation.
#define EP_RT_H "ep-rt-coreclr.h"
#define EP_RT_TYPES_H "ep-rt-types-coreclr.h"
#define EP_RT_CONFIG_H "ep-rt-config-coreclr.h"

// DiagnosticServer runtime implementation.
#define DS_RT_H "ds-rt-coreclr.h"
#define DS_RT_TYPES_H "ds-rt-types-coreclr.h"

2) Details for ep-rt.h (common) vs ep-rt-coreclr.h (CoreCLR)
 - [Common] #define EP_RT_DECLARE_LIST_PREFIX(prefix_name, list_name, list_type, item_type) \
    + 	static void EP_RT_BUILD_TYPE_FUNC_NAME(prefix_name, list_name, alloc) (list_type *list); \
 - [CoreCLR] #define EP_RT_DEFINE_LIST_PREFIX(prefix_name, list_name, list_type, item_type) \
    + 	static inline void EP_RT_BUILD_TYPE_FUNC_NAME(prefix_name, list_name, alloc) (list_type *list) \
	{ \
		STATIC_CONTRACT_NOTHROW; \
		_rt_coreclr_list_alloc<list_type>(list); \
	} \

    + template<typename LIST_TYPE>
static
inline
void
_rt_coreclr_list_alloc (LIST_TYPE *list) {
	STATIC_CONTRACT_NOTHROW;
	EP_ASSERT (list != NULL);

	list->list = new (nothrow) typename LIST_TYPE::list_type_t ();
}

